// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

@mixin e($element) {
	&__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// img replace 

@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}

//Flex direction

@mixin flexy {
  display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-around;
}

// Generate modifier color classes

@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;    
		}
	}
}

//blockquote

@mixin blockquote() {
  font-weight: $font-weight--light;
  font-style : italic;
  font-size : em(18px);
}

// Generate modifier color classes

@mixin bg-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;    
    }
  }
}


//Media Quries 

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;
    }
   } 
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md + 1) and (max-width: $brkpoint-lg) {
      @content;
    }
  } 
  @else if $break == "large" {
      @media (min-width: $brkpoint-lg) {
        @content;
      }
    }
   @else {
      @error "Whoop No value could be retrive for `#{$break}`";
   }
}

